// Generated by gencpp from file agvs_task/route_target.msg
// DO NOT EDIT!


#ifndef AGVS_TASK_MESSAGE_ROUTE_TARGET_H
#define AGVS_TASK_MESSAGE_ROUTE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agvs_task
{
template <class ContainerAllocator>
struct route_target_
{
  typedef route_target_<ContainerAllocator> Type;

  route_target_()
    : target_location_x(0.0)
    , target_location_y(0.0)
    , target_speed(0.0)
    , task_direction(0)
    , task_route_id(0)  {
    }
  route_target_(const ContainerAllocator& _alloc)
    : target_location_x(0.0)
    , target_location_y(0.0)
    , target_speed(0.0)
    , task_direction(0)
    , task_route_id(0)  {
  (void)_alloc;
    }



   typedef float _target_location_x_type;
  _target_location_x_type target_location_x;

   typedef float _target_location_y_type;
  _target_location_y_type target_location_y;

   typedef float _target_speed_type;
  _target_speed_type target_speed;

   typedef int8_t _task_direction_type;
  _task_direction_type task_direction;

   typedef int8_t _task_route_id_type;
  _task_route_id_type task_route_id;





  typedef boost::shared_ptr< ::agvs_task::route_target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agvs_task::route_target_<ContainerAllocator> const> ConstPtr;

}; // struct route_target_

typedef ::agvs_task::route_target_<std::allocator<void> > route_target;

typedef boost::shared_ptr< ::agvs_task::route_target > route_targetPtr;
typedef boost::shared_ptr< ::agvs_task::route_target const> route_targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agvs_task::route_target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agvs_task::route_target_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agvs_task::route_target_<ContainerAllocator1> & lhs, const ::agvs_task::route_target_<ContainerAllocator2> & rhs)
{
  return lhs.target_location_x == rhs.target_location_x &&
    lhs.target_location_y == rhs.target_location_y &&
    lhs.target_speed == rhs.target_speed &&
    lhs.task_direction == rhs.task_direction &&
    lhs.task_route_id == rhs.task_route_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agvs_task::route_target_<ContainerAllocator1> & lhs, const ::agvs_task::route_target_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agvs_task

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::agvs_task::route_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agvs_task::route_target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_task::route_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agvs_task::route_target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_task::route_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agvs_task::route_target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agvs_task::route_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6a82df07cc526c047af2d9e2d7bfca86";
  }

  static const char* value(const ::agvs_task::route_target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6a82df07cc526c04ULL;
  static const uint64_t static_value2 = 0x7af2d9e2d7bfca86ULL;
};

template<class ContainerAllocator>
struct DataType< ::agvs_task::route_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agvs_task/route_target";
  }

  static const char* value(const ::agvs_task::route_target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agvs_task::route_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 target_location_x\n"
"float32 target_location_y\n"
"float32 target_speed\n"
"int8 task_direction\n"
"int8 task_route_id\n"
;
  }

  static const char* value(const ::agvs_task::route_target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agvs_task::route_target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_location_x);
      stream.next(m.target_location_y);
      stream.next(m.target_speed);
      stream.next(m.task_direction);
      stream.next(m.task_route_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct route_target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agvs_task::route_target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agvs_task::route_target_<ContainerAllocator>& v)
  {
    s << indent << "target_location_x: ";
    Printer<float>::stream(s, indent + "  ", v.target_location_x);
    s << indent << "target_location_y: ";
    Printer<float>::stream(s, indent + "  ", v.target_location_y);
    s << indent << "target_speed: ";
    Printer<float>::stream(s, indent + "  ", v.target_speed);
    s << indent << "task_direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.task_direction);
    s << indent << "task_route_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.task_route_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGVS_TASK_MESSAGE_ROUTE_TARGET_H
