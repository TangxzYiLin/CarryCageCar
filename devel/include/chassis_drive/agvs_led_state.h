// Generated by gencpp from file chassis_drive/agvs_led_state.msg
// DO NOT EDIT!


#ifndef CHASSIS_DRIVE_MESSAGE_AGVS_LED_STATE_H
#define CHASSIS_DRIVE_MESSAGE_AGVS_LED_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace chassis_drive
{
template <class ContainerAllocator>
struct agvs_led_state_
{
  typedef agvs_led_state_<ContainerAllocator> Type;

  agvs_led_state_()
    : update_state(0)  {
    }
  agvs_led_state_(const ContainerAllocator& _alloc)
    : update_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _update_state_type;
  _update_state_type update_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(chassis_led_state_all_off)
  #undef chassis_led_state_all_off
#endif
#if defined(_WIN32) && defined(chassis_led_state_red_on)
  #undef chassis_led_state_red_on
#endif
#if defined(_WIN32) && defined(chassis_led_state_bule_on)
  #undef chassis_led_state_bule_on
#endif
#if defined(_WIN32) && defined(chassis_led_state_green_on)
  #undef chassis_led_state_green_on
#endif
#if defined(_WIN32) && defined(chassis_led_state_red_flash)
  #undef chassis_led_state_red_flash
#endif
#if defined(_WIN32) && defined(chassis_led_state_green_flash)
  #undef chassis_led_state_green_flash
#endif
#if defined(_WIN32) && defined(chassis_led_state_blue_flash)
  #undef chassis_led_state_blue_flash
#endif

  enum {
    chassis_led_state_all_off = 0u,
    chassis_led_state_red_on = 1u,
    chassis_led_state_bule_on = 2u,
    chassis_led_state_green_on = 3u,
    chassis_led_state_red_flash = 4u,
    chassis_led_state_green_flash = 5u,
    chassis_led_state_blue_flash = 6u,
  };


  typedef boost::shared_ptr< ::chassis_drive::agvs_led_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_drive::agvs_led_state_<ContainerAllocator> const> ConstPtr;

}; // struct agvs_led_state_

typedef ::chassis_drive::agvs_led_state_<std::allocator<void> > agvs_led_state;

typedef boost::shared_ptr< ::chassis_drive::agvs_led_state > agvs_led_statePtr;
typedef boost::shared_ptr< ::chassis_drive::agvs_led_state const> agvs_led_stateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_drive::agvs_led_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_drive::agvs_led_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_drive::agvs_led_state_<ContainerAllocator1> & lhs, const ::chassis_drive::agvs_led_state_<ContainerAllocator2> & rhs)
{
  return lhs.update_state == rhs.update_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_drive::agvs_led_state_<ContainerAllocator1> & lhs, const ::chassis_drive::agvs_led_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_drive

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::agvs_led_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::agvs_led_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::agvs_led_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::agvs_led_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::agvs_led_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::agvs_led_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_drive::agvs_led_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82295a76d34cf26c9e6b43410588f16c";
  }

  static const char* value(const ::chassis_drive::agvs_led_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82295a76d34cf26cULL;
  static const uint64_t static_value2 = 0x9e6b43410588f16cULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_drive::agvs_led_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_drive/agvs_led_state";
  }

  static const char* value(const ::chassis_drive::agvs_led_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_drive::agvs_led_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 update_state\n"
"       \n"
"uint8 chassis_led_state_all_off = 0\n"
"uint8 chassis_led_state_red_on  = 1\n"
"uint8 chassis_led_state_bule_on = 2\n"
"uint8 chassis_led_state_green_on = 3\n"
"uint8 chassis_led_state_red_flash = 4\n"
"uint8 chassis_led_state_green_flash = 5\n"
"uint8 chassis_led_state_blue_flash  = 6\n"
;
  }

  static const char* value(const ::chassis_drive::agvs_led_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_drive::agvs_led_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.update_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct agvs_led_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_drive::agvs_led_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_drive::agvs_led_state_<ContainerAllocator>& v)
  {
    s << indent << "update_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.update_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_DRIVE_MESSAGE_AGVS_LED_STATE_H
