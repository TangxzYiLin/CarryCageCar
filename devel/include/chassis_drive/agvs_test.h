// Generated by gencpp from file chassis_drive/agvs_test.msg
// DO NOT EDIT!


#ifndef CHASSIS_DRIVE_MESSAGE_AGVS_TEST_H
#define CHASSIS_DRIVE_MESSAGE_AGVS_TEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <chassis_drive/agvs_mode.h>
#include <chassis_drive/agvs_mode.h>
#include <agvs_task/route_target.h>

namespace chassis_drive
{
template <class ContainerAllocator>
struct agvs_test_
{
  typedef agvs_test_<ContainerAllocator> Type;

  agvs_test_()
    : agvs_mode_1()
    , agvs_mode_2()
    , run_target_task()  {
    }
  agvs_test_(const ContainerAllocator& _alloc)
    : agvs_mode_1(_alloc)
    , agvs_mode_2(_alloc)
    , run_target_task(_alloc)  {
  (void)_alloc;
    }



   typedef  ::chassis_drive::agvs_mode_<ContainerAllocator>  _agvs_mode_1_type;
  _agvs_mode_1_type agvs_mode_1;

   typedef  ::chassis_drive::agvs_mode_<ContainerAllocator>  _agvs_mode_2_type;
  _agvs_mode_2_type agvs_mode_2;

   typedef  ::agvs_task::route_target_<ContainerAllocator>  _run_target_task_type;
  _run_target_task_type run_target_task;





  typedef boost::shared_ptr< ::chassis_drive::agvs_test_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::chassis_drive::agvs_test_<ContainerAllocator> const> ConstPtr;

}; // struct agvs_test_

typedef ::chassis_drive::agvs_test_<std::allocator<void> > agvs_test;

typedef boost::shared_ptr< ::chassis_drive::agvs_test > agvs_testPtr;
typedef boost::shared_ptr< ::chassis_drive::agvs_test const> agvs_testConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::chassis_drive::agvs_test_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::chassis_drive::agvs_test_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::chassis_drive::agvs_test_<ContainerAllocator1> & lhs, const ::chassis_drive::agvs_test_<ContainerAllocator2> & rhs)
{
  return lhs.agvs_mode_1 == rhs.agvs_mode_1 &&
    lhs.agvs_mode_2 == rhs.agvs_mode_2 &&
    lhs.run_target_task == rhs.run_target_task;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::chassis_drive::agvs_test_<ContainerAllocator1> & lhs, const ::chassis_drive::agvs_test_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace chassis_drive

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::agvs_test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::chassis_drive::agvs_test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::agvs_test_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::chassis_drive::agvs_test_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::agvs_test_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::chassis_drive::agvs_test_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::chassis_drive::agvs_test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "944f63dcbde35e41019eefa46ce8a035";
  }

  static const char* value(const ::chassis_drive::agvs_test_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x944f63dcbde35e41ULL;
  static const uint64_t static_value2 = 0x019eefa46ce8a035ULL;
};

template<class ContainerAllocator>
struct DataType< ::chassis_drive::agvs_test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "chassis_drive/agvs_test";
  }

  static const char* value(const ::chassis_drive::agvs_test_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::chassis_drive::agvs_test_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agvs_mode agvs_mode_1\n"
"agvs_mode agvs_mode_2\n"
"\n"
"agvs_task/route_target run_target_task\n"
"\n"
"================================================================================\n"
"MSG: chassis_drive/agvs_mode\n"
"uint8 current_mode\n"
"\n"
"uint8 agvs_mode_manual =0\n"
"uint8 agvs_mode_auto_floor_1 = 1\n"
"uint8 agvs_mode_auto_floor_2 = 2\n"
"================================================================================\n"
"MSG: agvs_task/route_target\n"
"float32 target_location_x\n"
"float32 target_location_y\n"
"float32 target_speed\n"
"uint8 task_direction\n"
"uint8 task_route_id\n"
"\n"
"uint8 default_idle = 0\n"
"uint8 positive_direction = 1\n"
"uint8 opposite_direction = 2\n"
;
  }

  static const char* value(const ::chassis_drive::agvs_test_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::chassis_drive::agvs_test_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.agvs_mode_1);
      stream.next(m.agvs_mode_2);
      stream.next(m.run_target_task);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct agvs_test_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::chassis_drive::agvs_test_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::chassis_drive::agvs_test_<ContainerAllocator>& v)
  {
    s << indent << "agvs_mode_1: ";
    s << std::endl;
    Printer< ::chassis_drive::agvs_mode_<ContainerAllocator> >::stream(s, indent + "  ", v.agvs_mode_1);
    s << indent << "agvs_mode_2: ";
    s << std::endl;
    Printer< ::chassis_drive::agvs_mode_<ContainerAllocator> >::stream(s, indent + "  ", v.agvs_mode_2);
    s << indent << "run_target_task: ";
    s << std::endl;
    Printer< ::agvs_task::route_target_<ContainerAllocator> >::stream(s, indent + "  ", v.run_target_task);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHASSIS_DRIVE_MESSAGE_AGVS_TEST_H
