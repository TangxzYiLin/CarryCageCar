# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from chassis_drive/agvs_test.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import agvs_task.msg
import chassis_drive.msg

class agvs_test(genpy.Message):
  _md5sum = "944f63dcbde35e41019eefa46ce8a035"
  _type = "chassis_drive/agvs_test"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """agvs_mode agvs_mode_1
agvs_mode agvs_mode_2

agvs_task/route_target run_target_task

================================================================================
MSG: chassis_drive/agvs_mode
uint8 current_mode

uint8 agvs_mode_manual =0
uint8 agvs_mode_auto_floor_1 = 1
uint8 agvs_mode_auto_floor_2 = 2
================================================================================
MSG: agvs_task/route_target
float32 target_location_x
float32 target_location_y
float32 target_speed
uint8 task_direction
uint8 task_route_id

uint8 default_idle = 0
uint8 positive_direction = 1
uint8 opposite_direction = 2
"""
  __slots__ = ['agvs_mode_1','agvs_mode_2','run_target_task']
  _slot_types = ['chassis_drive/agvs_mode','chassis_drive/agvs_mode','agvs_task/route_target']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       agvs_mode_1,agvs_mode_2,run_target_task

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(agvs_test, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.agvs_mode_1 is None:
        self.agvs_mode_1 = chassis_drive.msg.agvs_mode()
      if self.agvs_mode_2 is None:
        self.agvs_mode_2 = chassis_drive.msg.agvs_mode()
      if self.run_target_task is None:
        self.run_target_task = agvs_task.msg.route_target()
    else:
      self.agvs_mode_1 = chassis_drive.msg.agvs_mode()
      self.agvs_mode_2 = chassis_drive.msg.agvs_mode()
      self.run_target_task = agvs_task.msg.route_target()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B3f2B().pack(_x.agvs_mode_1.current_mode, _x.agvs_mode_2.current_mode, _x.run_target_task.target_location_x, _x.run_target_task.target_location_y, _x.run_target_task.target_speed, _x.run_target_task.task_direction, _x.run_target_task.task_route_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.agvs_mode_1 is None:
        self.agvs_mode_1 = chassis_drive.msg.agvs_mode()
      if self.agvs_mode_2 is None:
        self.agvs_mode_2 = chassis_drive.msg.agvs_mode()
      if self.run_target_task is None:
        self.run_target_task = agvs_task.msg.route_target()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.agvs_mode_1.current_mode, _x.agvs_mode_2.current_mode, _x.run_target_task.target_location_x, _x.run_target_task.target_location_y, _x.run_target_task.target_speed, _x.run_target_task.task_direction, _x.run_target_task.task_route_id,) = _get_struct_2B3f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B3f2B().pack(_x.agvs_mode_1.current_mode, _x.agvs_mode_2.current_mode, _x.run_target_task.target_location_x, _x.run_target_task.target_location_y, _x.run_target_task.target_speed, _x.run_target_task.task_direction, _x.run_target_task.task_route_id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.agvs_mode_1 is None:
        self.agvs_mode_1 = chassis_drive.msg.agvs_mode()
      if self.agvs_mode_2 is None:
        self.agvs_mode_2 = chassis_drive.msg.agvs_mode()
      if self.run_target_task is None:
        self.run_target_task = agvs_task.msg.route_target()
      end = 0
      _x = self
      start = end
      end += 16
      (_x.agvs_mode_1.current_mode, _x.agvs_mode_2.current_mode, _x.run_target_task.target_location_x, _x.run_target_task.target_location_y, _x.run_target_task.target_speed, _x.run_target_task.task_direction, _x.run_target_task.task_route_id,) = _get_struct_2B3f2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3f2B = None
def _get_struct_2B3f2B():
    global _struct_2B3f2B
    if _struct_2B3f2B is None:
        _struct_2B3f2B = struct.Struct("<2B3f2B")
    return _struct_2B3f2B
